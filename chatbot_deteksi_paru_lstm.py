# -*- coding: utf-8 -*-
"""Chatbot Deteksi Paru LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5Myc1HbShhJ-LdcM_x3iDPa-iuCa8rp
"""

from google.colab import drive
drive.mount('/content/drive')

# Import Libraries
import json
import nltk
import time
import random
import string
import pickle
import numpy as np
import pandas as pd
from io import BytesIO
import tensorflow as tf
import IPython.display as ipd
import matplotlib.pyplot as plt
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import Model
from tensorflow.keras.utils import plot_model
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.layers import Input, Embedding, LSTM
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Flatten, Dense, GlobalMaxPool1D

import tensorflow as tf
print(tf.__version__)

# Package sentence tokenizer
nltk.download('punkt')
# Package lemmatization
nltk.download('wordnet')
# Package multilingual wordnet data
nltk.download('omw-1.4')

# Importing the dataset
with open('/content/drive/MyDrive/Dataset Json Tugas Akhir/User informasi Kanker_Paru.json') as content:
  data1 = json.load(content)

# Mendapatkan semua data ke dalam list
tags = []
inputs = []
responses = {}
words = []
classes = []
documents = []
ignore_words = ['?', '!']

for intent in data1['intents']:
  responses[intent['tag']]=intent['responses']
  for lines in intent['patterns']:
    inputs.append(lines)
    tags.append(intent['tag'])
    for pattern in intent['patterns']:
      w = nltk.word_tokenize(pattern)
      words.extend(w)
      documents.append((w, intent['tag']))
      # add to our classes list
      if intent['tag'] not in classes:
        classes.append(intent['tag'])

# Konversi data json ke dalam dataframe
data = pd.DataFrame({"patterns":inputs, "tags":tags})

# Cetak data keseluruhan
data

# # Cetak data baris pertama sampai baris kelima
data.head()

# Cetak data baris ke-70 sampai baris akhir
data.tail()

"""# **Preprocessing Data**

1.   Remove Punctuations (Menghapus Punktuasi)
2.   Lematization (Lematisasi)
3.   Tokenization (Tokenisasi)
4.   Apply Padding (Padding)
5.   Encoding the Outputs (Konversi Keluaran Enkoding)

## **Remove Punctuations**
Tahapan praproses pada data teks yang pertama adalah menghapus punktuasi atau tanda baca seperti special character yaitu '!' (tanda seru) ',' (tanda koma) '.' (tanda titik sebagai berhenti) '?' (tanda tanya) dan tanda baca yang lain.
"""

# Removing Punctuations (Menghilangkan Punktuasi)
data['patterns'] = data['patterns'].apply(lambda wrd:[ltrs.lower() for ltrs in wrd if ltrs not in string.punctuation])
data['patterns'] = data['patterns'].apply(lambda wrd: ''.join(wrd))

data

"""## **Lematisasi**

"""

# Lematisasi atau Lemmatization
lemmatizer = WordNetLemmatizer()
words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
print (len(words), "unique lemmatized words", words)

"""### **Menyortir Data Kelas Tags**"""

# sort classes
classes = sorted(list(set(classes)))
print (len(classes), "classes", classes)

"""### **Mencari Jumlah Keseluruhan Data Teks**"""

# documents = combination between patterns and intents
print (len(documents), "documents")

"""## **Tokenisasi**

"""

# Tokenize the data (Tokenisasi Data)
tokenizer = Tokenizer(num_words=2000)
tokenizer.fit_on_texts(data['patterns'])
train = tokenizer.texts_to_sequences(data['patterns'])
train

"""## **Padding**"""

# Apply padding
x_train = pad_sequences(train)
print(x_train) # Padding Sequences

"""## **Encoding Text**"""

# Encoding the outputs
le = LabelEncoder()
y_train = le.fit_transform(data['tags'])
print(y_train)

"""# **Input Length, Output Length and Vocabulary**"""

# input length
input_shape = x_train.shape[1]
print(input_shape)

# define vocabulary
vocabulary = len(tokenizer.word_index)
print("number of unique words : ", vocabulary)

# output length
output_length = le.classes_.shape[0]
print("output length: ", output_length)

"""Save Model Words & Classes**"""

pickle.dump(words, open('/content/word.pkl','wb'))
pickle.dump(classes, open('/content/classes.pkl','wb'))

"""## **Save Label Encoder & Tokenizer**"""

pickle.dump(le, open('/content/le.pkl','wb'))
pickle.dump(tokenizer, open('/content/tokenizers.pkl','wb'))

"""# **Neural Network Model**"""

# Creating the model (Membuat Modeling)
i = Input(shape=(input_shape,))
x = Embedding(vocabulary+1,10)(i) # Layer Embedding
x = LSTM(10, return_sequences=True)(x) # Layer Long Short Term Memory
x = Flatten()(x) # Layer Flatten
x = Dense(output_length, activation="softmax")(x) # Layer Dense
model  = Model(i,x)

# Compiling the model (Kompilasi Model)
model.compile(loss="sparse_categorical_crossentropy", optimizer='adam', metrics=['accuracy'])

# Visualization Plot Architecture Model (Visualisasi Plot Arsitektur Model)
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

# Menampilkan Parameter Model
model.summary()

# Training the model (Latih model data sampai 400 kali)
train = model.fit(x_train, y_train, epochs=400)

"""# **Model Analysis**"""

# Plotting model Accuracy and Loss(Visualisasi Plot Hasil Akurasi dan Loss)
# Plot Akurasi
plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
plt.plot(train.history['accuracy'],label='Training Set Accuracy')
plt.legend(loc='lower right')
plt.title('Accuracy')
#plt Loss
plt.subplot(1, 2, 2)
plt.plot(train.history['loss'],label='Training Set Loss')
plt.legend(loc='upper right')
plt.title('Loss')
plt.show()

model.save("model.h5")

"""
import warnings
from sklearn.naive_bayes import GaussianNB

# Mengabaikan peringatan versi (opsional)
warnings.filterwarnings("ignore", category=UserWarning, module="sklearn")

# Membuat Input Chat
while True:
  texts_p = []
  prediction_input = input('üë®‚Äçü¶∞ Kamu : ')

  # Menghapus punktuasi dan konversi ke huruf kecil
  prediction_input = [letters.lower() for letters in prediction_input if letters not in string.punctuation]
  prediction_input =''.join(prediction_input)
  texts_p.append(prediction_input)

  # Tokenisasi dan Padding
  prediction_input = tokenizer.texts_to_sequences(texts_p)
  prediction_input = np.array(prediction_input).reshape(-1)
  prediction_input = pad_sequences([prediction_input], input_shape)

  # Mendapatkan hasil keluaran pada model
  output = model.predict(prediction_input)
  output = output.argmax()

  # Menemukan respon sesuai data tag dan memainkan voice bot
  response_tag = le.inverse_transform([output])[0]
  jawaban = random.choice(responses[response_tag])
  print("ü§ñ ParuCekBot : ",jawaban)
  print("="*60 + "\n")

  if response_tag == "goodbye":
    def input_data():
      print("Selamat datang di menu deteksi penyakit paru, mohon jawab list pertanyaan berikut:")
      jenisKelamin = input("Apa jenis kelamin anda ?")
      usia = input("Berapa usia anda?")
      merokok = input("Apakah anda merokok?")
      jarikuning = input("Apakah jari anda berwarna kuning ?")
      kecemasan = input("Apakah anda punya riwayat kecemasan ?")
      kesehatanmental = input("Apakah anda punya riwayat kesehatan mental ?")
      penyakitkronis = input("Apakah anda punya riwayat sakit kronis ?")
      kelelahan = input("Apakah anda punya riwayat kelelahan?")
      alergi = input("Apakah anda punya riwayat sakit alergi ?")
      mengi = input("Apakah anda punya riwayat mengi ?")
      konsumsialkohol = input("Apakah anda konsumsi minuman mengandung alkohol?")
      batuk = input("Apakah anda mengalami batuk ?")
      sesaknapas = input("Apakah anda mengalami sesak nafas ?")
      kesulitanmenelan = input("Apakah anda mengalami kesulitan menelan ?")
      nyeridada = input("Apakah anda mengalami nyeri pada dada ?")

      return {
      "jenisKelamin": jenisKelamin,
      "usia": usia,
      "merokok": merokok,
      "jarikuning": jarikuning,
      "kecemasan": kecemasan,
      "kesehatanmental": kesehatanmental,
      "penyakitkronis": penyakitkronis,
      "kelelahan": kelelahan,
      "alergi": alergi,
      "mengi": mengi,
      "konsumsialkohol": konsumsialkohol,
      "batuk": batuk,
      "sesaknapas": sesaknapas,
      "kesulitanmenelan": kesulitanmenelan,
      "nyeridada": nyeridada
      }

def konfirmasi_data(data):
    print("Terima kasih telah mengisi survey. Apakah data kamu benar sebagai berikut:")
    for k, v in data.items():
        print(f"{k}: {v}")

    konfirmasi = input("Jika sudah sesuai input 1, jika tidak sesuai input 0: ")
    return konfirmasi == "1"

def preprocess_data(data):
    # Konversi kategori ke numerik
    processed_data = [
        1 if data['jenisKelamin'].lower() == 'l' else 0,  # jenisKelamin
        int(data['usia']),                                # usia
        int(data['merokok']),                             # merokok
        int(data['jarikuning']),                          # jarikuning
        int(data['kecemasan']),                           # kecemasan
        int(data['kesehatanmental']),                     # kesehatanmental
        int(data['penyakitkronis']),                      # penyakitkronis
        int(data['kelelahan']),                           # kelelahan
        int(data['alergi']),                              # alergi
        int(data['mengi']),                               # mengi
        int(data['konsumsialkohol']),                     # konsumsialkohol
        int(data['batuk']),                               # batuk
        int(data['sesaknapas']),                          # sesaknapas
        int(data['kesulitanmenelan']),                    # kesulitanmenelan
        int(data['nyeridada'])                            # nyeridada
    ]
    return processed_data

# Memuat model
with open('/content/drive/MyDrive/Dataset Json Tugas Akhir/model.pickle', 'rb') as file:
    model = pickle.load(file)

# Definisikan response_tag
# response_tag = "goodbye"

#if response_tag == "goodbye":
    while True:
        data = input_data()
        if konfirmasi_data(data):
            processed_data = preprocess_data(data)
            prediction = model.predict([processed_data])
            print("Hasil prediksi:", prediction)
            break
        else:
            print("Silakan isi data kembali.")
"""

# Membuat Input Chat
def input_data():
  print("Selamat datang di menu deteksi penyakit paru, mohon jawab list pertanyaan berikut:")
  jenisKelamin = input("Apa jenis kelamin anda (pria / wanita)?")
  usia = input("Berapa usia anda?")
  merokok = input("Apakah anda merokok?")
  jarikuning = input("Apakah jari anda berwarna kuning ?")
  kecemasan = input("Apakah anda punya riwayat kecemasan ?")
  kesehatanmental = input("Apakah anda punya riwayat kesehatan mental ?")
  penyakitkronis = input("Apakah anda punya riwayat sakit kronis ?")
  kelelahan = input("Apakah anda punya riwayat kelelahan?")
  alergi = input("Apakah anda punya riwayat sakit alergi ?")
  mengi = input("Apakah anda punya riwayat mengi ?")
  konsumsialkohol = input("Apakah anda konsumsi minuman mengandung alkohol?")
  batuk = input("Apakah anda mengalami batuk ?")
  sesaknapas = input("Apakah anda mengalami sesak nafas ?")
  kesulitanmenelan = input("Apakah anda mengalami kesulitan menelan ?")
  nyeridada = input("Apakah anda mengalami nyeri pada dada ?")

  return {
  "jenisKelamin": jenisKelamin,
  "usia": usia,
  "merokok": merokok,
  "jarikuning": jarikuning,
  "kecemasan": kecemasan,
  "kesehatanmental": kesehatanmental,
  "penyakitkronis": penyakitkronis,
  "kelelahan": kelelahan,
  "alergi": alergi,
  "mengi": mengi,
  "konsumsialkohol": konsumsialkohol,
  "batuk": batuk,
  "sesaknapas": sesaknapas,
  "kesulitanmenelan": kesulitanmenelan,
  "nyeridada": nyeridada
  }

def konfirmasi_data(data):
    print("Terima kasih telah mengisi survey. Apakah data kamu benar sebagai berikut:")
    for k, v in data.items():
        print(f"{k}: {v}")

    konfirmasi = input("Jika sudah sesuai input 1, jika tidak sesuai input 0: ")
    return konfirmasi == "1"

def preprocess_data(data):
    # Konversi kategori ke numerik
    processed_data = [
        1 if data['jenisKelamin'].lower() == 'pria' else 0,    # jenisKelamin
        int(data['usia']),                                     # usia
        2 if data['merokok'].lower() == 'ya' else 0,           # merokok
        2 if data['jarikuning'].lower() == 'ya' else 0,        # jarikuning
        2 if data['kecemasan'].lower() == 'ya' else 0,         # kecemasan
        2 if data['kesehatanmental'].lower() == 'ya' else 0,   # kesehatanmental
        2 if data['penyakitkronis'].lower() == 'ya' else 0,    # penyakitkronis
        2 if data['kelelahan'].lower() == 'ya' else 0,         # kelelahan
        2 if data['alergi'].lower () == 'ya' else 0,           # alergi
        2 if data['mengi'].lower () == 'ya' else 0,            # mengi
        2 if data['konsumsialkohol'].lower() == 'ya' else 0,   # konsumsialkohol
        2 if data['batuk'].lower() == 'ya' else 0,             # batuk
        2 if data['sesaknapas'].lower () == 'ya' else 0,       # sesaknapas
        2 if data['kesulitanmenelan'].lower () == 'ya' else 0, # kesulitanmenelan
        2 if data['nyeridada'].lower () == 'ya' else 0         # nyeridada
    ]
    return processed_data

def prediction(data):
  with open('/content/drive/MyDrive/Dataset Json Tugas Akhir/model.pickle', 'rb') as file:
    model2 = pickle.load(file)
  prediction = model2.predict([processed_data])
  print("Hasil prediksi:", prediction)


while True:
  texts_p = []
  prediction_input = input('üë®‚Äçü¶∞ Kamu : ')

  # Menghapus punktuasi dan konversi ke huruf kecil
  prediction_input = [letters.lower() for letters in prediction_input if letters not in string.punctuation]
  prediction_input =''.join(prediction_input)
  texts_p.append(prediction_input)

  # Tokenisasi dan Padding
  prediction_input = tokenizer.texts_to_sequences(texts_p)
  prediction_input = np.array(prediction_input).reshape(-1)
  prediction_input = pad_sequences([prediction_input], input_shape)

  # Mendapatkan hasil keluaran pada model
  output = model.predict(prediction_input)
  output = output.argmax()

  # Menemukan respon sesuai data tag dan memainkan voice bot
  response_tag = le.inverse_transform([output])[0]
  jawaban = random.choice(responses[response_tag])
  print("ü§ñ ParuCekBot : ",jawaban)
  print("="*60 + "\n")

  if response_tag == "goodbye":
    data = input_data()
    print(data)
    if konfirmasi_data(data):
      processed_data = preprocess_data(data)
      pred = prediction(processed_data)
      break
    else:
        print("Silakan isi data kembali.")
        data = input_data()
        processed_data = preprocess_data(data)
        pred = prediction(processed_data)

    '''
    print("selamat datang di menu deteksi penyakit paru, mohon jawab list pertanyaan berikut:")
    jenisKelamin = input("Apa jenis kelamin anda ?")
    usia = input("berapa usia anda?")
    merokok = input("Apakah anda merokok?")
    jarikuning = input("Apakah jari anda berwarna kuning ?")
    kecemasan = input("Apakah anda punya riwayat kecemasan ?")
    kesehatanmental = input("Apakah anda punya riwayat kesehatan mental ?")
    penyakitkronis = input("Apakah anda punya riwayat sakit kronis ?")
    kelelahan = input("Apakah anda punya riwayat kelelahan?")
    alergi = input("Apakah anda punya riwayat sakit alergi ?")
    mengi = input("Apakah anda punya riwayat mengi ?")
    konsumsialkohol = input("Apakah anda komsumsi minuman mengandung alkohol?")
    batuk = input("Apakah anda mengalami batuk ?")
    sesaknapas = input("Apakah anda mengalami sesak nafas ?")
    kesulitanmenelan = input("Apakah anda mengalami kesulitan menelan ?")
    nyeridada = input("Apakah anda mengalami nyeri pada dada ?")
    print("terima kasih telah mengisi survey. apakah data kamu benar sebagai berikut:")
    print("jenis kelamin:", jenisKelamin, "usia:" , usia, "merokok:", merokok, "jarikuning:", jarikuning, "kecemasan:", kecemasan, "kesehatanmental:", kesehatanmental, "penyakitkronis:", penyakitkronis, "kelelahan:", kelelahan, "alergi:", alergi, "mengi:", mengi, "konsumsialkohol:", konsumsialkohol, "batuk:", batuk, "sesaknapas:", sesaknapas, "kesulitanmenelan:", kesulitanmenelan, "nyeridada:", nyeridada,)
    konfirmasi = input("jika sudah sesuai input 1 dan jika belum benar ketik tidak untuk mengisi kembali data riwayat penyakit anda")
    # if konfirmasi == "1" : dihapus

    if konfirmasi == "1" :
      data = [jenisKelamin,usia, merokok,jarikuning,kecemasan,kesehatanmental,penyakitkronis,kelelahan,alergi,mengi,konsumsialkohol,batuk,sesaknapas,kesulitanmenelan,nyeridada]
      data = [data]
      print(data)
      print("Terima kasih! Data anda telah disimpan dan akan muncul hasil prediksi sesuai input data riwayat penyakit anda")
      # 55 sampai 57 dihapus
      break
    else:
      print("Silahkan mulai ketik dengan mengetik (bye) untuk langsung pindah ke prediksi dan input kembali data dengan benar.")
      input_data
    '''